(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{631:function(t,a,s){"use strict";s.r(a);var v=s(11),r=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"es6-异步操作和-async-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6-异步操作和-async-函数"}},[t._v("#")]),t._v(" ES6 异步操作和 async 函数")]),t._v(" "),s("blockquote",[s("p",[t._v("异步编程对 JavaScript 语言太重要。Javascript 语言的执行环境是“单线程”的，如果没有异步编程，根本没法用，非卡死不可。")])]),t._v(" "),s("p",[t._v("ES6 诞生以前，异步编程的方法，大概有下面四种。")]),t._v(" "),s("ul",[s("li",[t._v("回调函数")]),t._v(" "),s("li",[t._v("事件监听")]),t._v(" "),s("li",[t._v("发布/订阅")]),t._v(" "),s("li",[t._v("Promise 对象")])]),t._v(" "),s("blockquote",[s("p",[t._v("ES6 将 JavaScript 异步编程带入了一个全新的阶段，ES7 的 Async 函数更是提出了异步编程的终极解决方案")])]),t._v(" "),s("h2",{attrs:{id:"基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),s("h3",{attrs:{id:"异步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步"}},[t._v("#")]),t._v(" 异步")]),t._v(" "),s("p",[t._v('所谓"异步"，简单说就是一个任务分成两段，先执行第一段，然后转而执行其他任务，等做好了准备，再回过头执行第二段。')]),t._v(" "),s("p",[t._v("比如，有一个任务是读取文件进行处理，任务的第一段是向操作系统发出请求，要求读取文件。然后，程序执行其他任务，等到操作系统返回文件，再接着执行任务的第二段（处理文件）。这种不连续的执行，就叫做异步。")]),t._v(" "),s("p",[t._v("相应地，连续的执行就叫做同步。由于是连续执行，不能插入其他任务，所以操作系统从硬盘读取文件的这段时间，程序只能干等着。")])])}),[],!1,null,null,null);a.default=r.exports}}]);